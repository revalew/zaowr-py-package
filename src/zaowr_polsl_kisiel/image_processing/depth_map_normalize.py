import numpy as np
import cv2 as cv
from colorama import Fore, Style, init as colorama_init  # , Back

colorama_init(autoreset=True)

def depth_map_normalize(
        depthMap: np.ndarray,
        normalizeDepthMapRange: str = "8-bit"
) -> np.ndarray:
    """
    Normalize depth map to a specified range.

    **WARNING: THIS FUNCTION WAS NOT TESTED THOROUGHLY**

    16-BIT AND 32-BIT RANGES WERE GENERATED BY JetBrains AI

    **USE ONLY THE 8-BIT AND 24-BIT RANGES**, AS OTHER RANGES MAY BE INCORRECT (MOST DEFINITELY ARE WRONG...)

    I'm only sure that the 8-bit and 24-bit ranges are correct and added the rest only for the sake of completeness

    :param np.ndarray depthMap: Depth map
    :param str normalizeDepthMapRange: Range to normalize depth map to (e.g. "8-bit", "16-bit", "24-bit", "32-bit")

    :raises ValueError: Raises ValueError if:
        - **`depthMap`** is not a numpy array
        - **`normalizeDepthMapRange`** is not a string

    :raises TypeError: Raises TypeError if:
        - **`normalizeDepthMapRange`** is not a string

    :raises RuntimeError: Raises RuntimeError if:
        - **`depthMapNormalized`** is None

    :return: Normalized depth map as a numpy array
    """
    if depthMap is None or not isinstance(depthMap, np.ndarray):
        raise ValueError(Fore.RED + "\nDepth map must be provided!\n")

    if normalizeDepthMapRange is None or not isinstance(normalizeDepthMapRange, str):
        raise TypeError(Fore.RED + "\n`normalizeDepthMapRange` must be a string!\n")

    depthMapNormalized = None

    # WARNING: THIS FUNCTION WAS NOT TESTED THOROUGHLY
    # GENERATED BY JetBrains AI
    # USE ONLY THE 8-BIT AND 24-BIT RANGEs, AS OTHER RANGES MAY BE INCORRECT (MOST DEFINITELY ARE WRONG...)
    # I'm only sure that the 8-bit and 24-bit ranges are correct and added the rest only for the sake of completeness
    if normalizeDepthMapRange == "8-bit":
        # Normalize depth map to 8-bit grayscale (0-255)
        depthMapNormalized = cv.normalize(depthMap, None, 0, 255, cv.NORM_MINMAX)
        depthMapNormalized = depthMapNormalized.astype(np.uint8)

    elif normalizeDepthMapRange == "16-bit":
        # Normalize depth map to 16-bit grayscale (0-65535)
        depthMapNormalized = cv.normalize(depthMap, None, 0, 65535, cv.NORM_MINMAX)
        depthMapNormalized = depthMapNormalized.astype(np.uint16)

    elif normalizeDepthMapRange == "24-bit":
        # Normalize depth map to 24-bit color (0-16777215)
        depthMapNormalized = (cv.normalize(depthMap, None, 0, (256 ** 3 - 1), cv.NORM_MINMAX)).astype(np.uint32)
        # Extract RGB channels
        R = (depthMapNormalized & 0xFF).astype(np.uint8)
        G = ((depthMapNormalized >> 8) & 0xFF).astype(np.uint8)
        B = ((depthMapNormalized >> 16) & 0xFF).astype(np.uint8)

        # Combine channels into an RGB image
        depthMapNormalized = np.stack((R, G, B), axis=-1)

    elif normalizeDepthMapRange == "32-bit":
        # Normalize depth map to 32-bit grayscale (0-4294967295)
        depthMapNormalized = cv.normalize(depthMap, None, 0, 4294967295, cv.NORM_MINMAX)
        depthMapNormalized = depthMapNormalized.astype(np.uint32)

    else:
        raise ValueError(Fore.RED + "\n`normalizeDepthMapRange` must be one of the following: 8-bit, 16-bit, 24-bit, 32-bit!\n")

    if depthMapNormalized is None:
        raise RuntimeError(Fore.RED + "\nDepth map normalization failed!\n")

    else:
        print(Fore.GREEN + "\nDepth map successfully normalized")

    return depthMapNormalized
